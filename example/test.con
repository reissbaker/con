;*
this is a test file to make sure the con compiler works.
*;

(def add-two [x]
  (let [y 2]
    (+ x y)))

;; let can take multi-dimensional arrays, similar to let* from Racket
(def add-five [x]
  (let [[y 3]
        [z (add-two 0)]]
    (+ z (+ y x))))

(add-five 5)

;*
lazily evaluate `val`, `def`, `macro`, and `type` bodies during typechecking,
but reserve a slot for them in the scope tree.

also lazily evaluate `type`, `val`, and `def` bodies at macro time, similarly
reserving a slot for them in the scope tree pointing to a thunk. referencing
them forces the thunk to evaluate.
*;
(val z (add-five 10))

(val t true)

(val null-val null)

;; public is a macro that exports the val, def, or defmacro it precedes
;; (public val version 0)

(- 5 (+ 3 (add-five z)))
